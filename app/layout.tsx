import { Metadata } from "next";
import StyledComponentsRegistry from "@/lib/registry";
import GlobalStateProvider from "./GlobalStateProvider/GlobalStateProvider";
import QueryProvider from "@/react-query/QueryProvider";
import { cookies, headers } from "next/headers";
import PrivatRoutes from "@/components/ProtectedRoutes/ProtectedRoutes";
import ProtectedRoutes from "@/components/ProtectedRoutes/ProtectedRoutes";
import PokemonList from "@/components/PokemonList/PokemonList";
import { SessionProvider } from "next-auth/react";
import { NextAuthProvider } from "@/components/NextAuthProvider/NextAuthProvider";
import AuthMenu from "@/components/AuthMenu/AuthMenu";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export const metadata: Metadata = {
  title: "Next.js",
  description: "Generated by Next.js",
};

interface IUser {
  email?: string;
  firstName?: string;
  balance?: number;
  message?: string;
}

interface IProps {
  children: React.ReactNode;
  session: any;
}

const BASE_URL = "https://wallet-backend-xmk0.onrender.com/api";
const USER_CURRENT = "/users/current";

const getCurrent = async () => {
  const cookieStore = cookies();
  const authToken = cookieStore.get("authToken")?.value;

  const options = {
    method: "GET",
    headers: {
      Authorization: `Bearer ${authToken}`,
    },
  };

  // if (!authToken) {
  //   return;
  // }

  const resFetch = await fetch(`${BASE_URL}${USER_CURRENT}`, options);

  // console.log("getCurrent  resFetch:", resFetch.ok);

  if (!resFetch.ok) {
    console.log("ERRROR");

    // throw new Error("NEW User  Unauthorized");
  }

  const user = (await resFetch.json()) as IUser;

  return user;
};
export { getCurrent };

async function RootLayout({ children }: { children: React.ReactNode }) {
  // const session = await getServerSession(authOptions);
  // console.log("Home  session:", session);

  // getCurrent()

  // const ddd = await getCurrent()
  // console.log("RootLayout  ddd:", ddd);

  // const cookieStore = cookies();
  // const authToken = cookieStore.get("authToken")?.value;

  // const options = {
  //   method: "GET",
  //   headers: {
  //     Authorization: `Bearer ${authToken}`,
  //   },
  // };

  // const resFetch = await fetch(`${BASE_URL}${USER_CURRENT}`, options);
  // const user = (await resFetch.json()) as IUser;

  // const isLoggedIn = !!user?.email;

  // if (!isLoggedIn) {
  //   return (
  //     <html lang="en">
  //       <head>
  //         <link rel="icon" href="/vercel.svg" />
  //       </head>
  //       <body
  //         style={{
  //           display: "flex",
  //           alignItems: "center",
  //           justifyContent: "center",
  //           height: "50vw",
  //         }}
  //       >
  //         <h1>ЗАГРУЗКА...</h1>
  //       </body>
  //     </html>
  //   );
  // }

  return (
    <html lang="en">
      <head>
        <link rel="icon" href="/vercel.svg" />
      </head>
      <body style={{ background: "#cdc3c1" }}>
        <QueryProvider>
          <StyledComponentsRegistry>
            <GlobalStateProvider user={{}} isLoggedIn={true}>
              {/* <ProtectedRoutes
                pathname={"f"}
                isLoggedIn={isLoggedIn}
                privateRoutes={['ddd']}
                limitedRoutes={['ggg']}
              > */}
              <NextAuthProvider>
                <AuthMenu />
                {children}
              </NextAuthProvider>
              {/* </ProtectedRoutes> */}
            </GlobalStateProvider>
          </StyledComponentsRegistry>
        </QueryProvider>
      </body>
    </html>
  );
}

export default RootLayout;
// export default wrapper.withRedux(RootLayout);
